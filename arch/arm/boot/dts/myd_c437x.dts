/*
* Copyright (C) 2015 MYIR Tech Limited. - http://www.myirtech.com
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License version 2 as
* published by the Free Software Foundation.
*/

/* MYIR myd_c437x */

/dts-v1/;

#include "am4372.dtsi"
#include <dt-bindings/pinctrl/am43xx.h>
#include <dt-bindings/pwm/pwm.h>
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
	model = "MYIR myd_c437x";
	compatible = "myir,myd_c437x","ti,am4372","ti,am43";

	vtt_fixed: fixedregulator-vtt {
		compatible = "regulator-fixed";
		regulator-name = "vtt_fixed";
		regulator-min-microvolt = <1500000>;
		regulator-max-microvolt = <1500000>;
		regulator-always-on;
		regulator-boot-on;
		enable-active-high;
//		gpio = <&gpio5 7 GPIO_ACTIVE_HIGH>;
	};

	leds {
		compatible = "gpio-leds";

		pinctrl-names = "default";
		pinctrl-0 = <&leds_pins>;
		led@0 {
			label = "myc_d36";
			gpios = <&gpio5 11 GPIO_ACTIVE_HIGH>;	/* Bank 5, pin 11 */
			linux,default-trigger = "cpu0";
			default-state = "off";
		};
	};


/*	sound0: sound@0 {
		compatible = "simple-audio-card";
		simple-audio-card,name = "MYD-C437X-EVM";
//		simple-audio-card,widgets =
//			"Headphone", "Headphone Jack",
//			"Line", "Line In";
		simple-audio-card,routing =
			"MIC_IN", "Mic Jack",
			"Mic Jack", "Mic Bias",
			"Headphone Jack", "HP_OUT";
		simple-audio-card,format = "i2s";
		simple-audio-card,bitclock-master = <&sound0_master>;
		simple-audio-card,frame-master = <&sound0_master>;
		simple-audio-card,bitclock-inversion;

		simple-audio-card,cpu {
			sound-dai = <&mcasp1>;
			system-clock-frequency = <12000000>;
		};
	};

	audio_mstrclk: mclk_osc {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <12000000>;
	};*/

};

&am43xx_pinmux {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&clkout_pins &unused_pins_default>;
	pinctrl-1 = <&unused_pins_sleep>;

	clkout_pins: pinmux_clkout_pins {
		pinctrl-single,pins = <
			0x274 (PIN_OUTPUT_PULLUP | MUX_MODE3)    /* xdma_event_intr1.clkout2 */
			/* 0x270 (PIN_OUTPUT_PULLUP | MUX_MODE3) */ /* xdma_event_intr0.clkout1 mode 3*/
		>;
	};
	
	ledg_pio0_pins_default: ledg_pio0_pins_default {
		pinctrl-single,pins = <
			0xd0 ( PIN_OUTPUT | MUX_MODE7 ) /* (C19) dss_data12.gpio0[8] */
			0xd8 ( PIN_OUTPUT | MUX_MODE7 ) /* (C17) dss_data14.gpio0[10] */
		>;
	};

	led_lte_gpio4_pins_default: led_lte_gpio4_pins_default {
		pinctrl-single,pins = <
			0x1b4 ( PIN_OUTPUT | MUX_MODE7 ) /* (AD18) cam0_vd.gpio4[1] */
			0x1bc ( PIN_OUTPUT | MUX_MODE7 ) /* (AD17) cam0_wen.gpio4[3] */
			0x1c4 ( PIN_OUTPUT | MUX_MODE7 ) /* (AB19) cam0_data8.gpio4[5] */
			0x1cc ( PIN_OUTPUT | MUX_MODE7 ) /* (AC24) cam1_data9.gpio4[7] */
			0x1d4 ( PIN_OUTPUT | MUX_MODE7 ) /* (AD25) cam1_hd.gpio4[9] */
			0x1d8 ( PIN_OUTPUT | MUX_MODE7 ) /* (AC23) cam1_vd.gpio4[10] */
			0x1dc ( PIN_INPUT | MUX_MODE7 ) /* (AE21) cam1_pclk.gpio4[11] */
			0x1e0 ( PIN_OUTPUT | MUX_MODE7 ) /* (AC25) cam1_field.gpio4[12] */
			0x1e4 ( PIN_OUTPUT | MUX_MODE7 ) /* (AB25) cam1_wen.gpio4[13] */
			0x1e8 ( PIN_INPUT | MUX_MODE7 ) /* (AB20) cam1_data0.gpio4[14] */
			0x1ec ( PIN_INPUT | MUX_MODE7 ) /* (AC21) cam1_data1.gpio4[15] */
			0x1f0 ( PIN_INPUT | MUX_MODE7 ) /* (AD21) cam1_data2.gpio4[16] */
			0x1f4 ( PIN_OUTPUT | MUX_MODE7 ) /* (AE22) cam1_data3.gpio4[17] */
			0x1f8 ( PIN_OUTPUT | MUX_MODE7 ) /* (AD22) cam1_data4.gpio4[18] */
			0x1fc ( PIN_OUTPUT | MUX_MODE7 ) /* (AE23) cam1_data5.gpio4[19] */
			0x200 ( PIN_OUTPUT | MUX_MODE7 ) /* (AD23) cam1_data6.gpio4[20] */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	led_lte_gpio4_pins_sleep: led_lte_gpio4_pins_sleep {
		pinctrl-single,pins = <
			0x1b4 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AD18) cam0_vd.gpio4[1] */
			0x1bc (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AD17) cam0_wen.gpio4[3] */
			0x1c4 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AB19) cam0_data8.gpio4[5] */
			0x1cc (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AC24) cam1_data9.gpio4[7] */
			0x1d4 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AD25) cam1_hd.gpio4[9] */
			0x1d8 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AC23) cam1_vd.gpio4[10] */
			0x1dc (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AE21) cam1_pclk.gpio4[11] */
			0x1e0 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AC25) cam1_field.gpio4[12] */
			0x1e4 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (AB25) cam1_wen.gpio4[13] */
			0x1e8 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AB20) cam1_data0.gpio4[14] */
			0x1ec (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (AC21) cam1_data1.gpio4[15] */
			0x1f0 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AD21) cam1_data2.gpio4[16] */
			0x1f4 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AE22) cam1_data3.gpio4[17] */
			0x1f8 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AD22) cam1_data4.gpio4[18] */
			0x1fc (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AE23) cam1_data5.gpio4[19] */
			0x200 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (AD23) cam1_data6.gpio4[20] */
		>;
	};

	i2c1_pins_default: i2c1_pins_default {
		pinctrl-single,pins = <
			0x240 ( PIN_INPUT | MUX_MODE1 ) /* (G20) gpio5_10.I2C1_SCL */
			0x248 ( PIN_INPUT | MUX_MODE1 ) /* (E25) gpio5_12.I2C1_SDA */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	i2c1_pins_sleep: i2c1_pins_sleep {
		pinctrl-single,pins = <
			0x240 (PIN_INPUT | MUX_MODE7 ) /* (G20) gpio5_10.I2C1_SCL */
			0x248 (PIN_INPUT | MUX_MODE7 ) /* (E25) gpio5_12.I2C1_SDA */
		>;
	};
	
	i2c0_pins_default: i2c0_pins_default {
		pinctrl-single,pins = <
			0x18c ( PIN_INPUT | MUX_MODE0 ) /* (Y22) I2C0_SCL.I2C0_SCL */
			0x188 ( PIN_INPUT | MUX_MODE0 ) /* (AB24) I2C0_SDA.I2C0_SDA */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	i2c0_pins_sleep: i2c0_pins_sleep {
		pinctrl-single,pins = <
			0x18c (PIN_INPUT | MUX_MODE7 ) /* (Y22) I2C0_SCL.I2C0_SCL */
			0x188 (PIN_INPUT | MUX_MODE7 ) /* (AB24) I2C0_SDA.I2C0_SDA */
		>;
	};

	mcasp0_pins_default: mymcasp0_pins_default {
		pinctrl-single,pins = <
			0x19c ( PIN_INPUT | MUX_MODE0 ) /* (M24) mcasp0_ahclkr.mcasp0_ahclkr */
			0x1a0 ( PIN_INPUT | MUX_MODE0 ) /* (L23) mcasp0_aclkr.mcasp0_aclkr */
			0x1a4 ( PIN_INPUT | MUX_MODE0 ) /* (K23) mcasp0_fsr.mcasp0_fsr */
			0x198 ( PIN_OUTPUT | MUX_MODE0 ) /* (H23) mcasp0_axr0.mcasp0_axr0 */
			0x1a8 ( PIN_INPUT | MUX_MODE0 ) /* (M25) mcasp0_axr1.mcasp0_axr1 */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	mcasp0_pins_sleep: mymcasp0_pins_sleep {
		pinctrl-single,pins = <
			0x19c (PIN_INPUT | MUX_MODE7 ) /* (M24) mcasp0_ahclkr.mcasp0_ahclkr */
			0x1a0 (PIN_INPUT | MUX_MODE7 ) /* (L23) mcasp0_aclkr.mcasp0_aclkr */
			0x1a4 (PIN_INPUT | MUX_MODE7 ) /* (K23) mcasp0_fsr.mcasp0_fsr */
			0x198 (PIN_INPUT | MUX_MODE7 ) /* (H23) mcasp0_axr0.mcasp0_axr0 */
			0x1a8 (PIN_INPUT | MUX_MODE7 ) /* (M25) mcasp0_axr1.mcasp0_axr1 */
		>;
	};

	mmc1_pins_default: mmc1_pins_default {
		pinctrl-single,pins = <
			0x100 ( PIN_INPUT | MUX_MODE0 ) /* (D1) mmc0_clk.mmc0_clk */
			0x104 ( PIN_INPUT | MUX_MODE0 ) /* (D2) mmc0_cmd.mmc0_cmd */
			0xfc ( PIN_INPUT | MUX_MODE0 ) /* (C1) mmc0_dat0.mmc0_dat0 */
			0xf8 ( PIN_INPUT | MUX_MODE0 ) /* (C2) mmc0_dat1.mmc0_dat1 */
			0xf4 ( PIN_INPUT | MUX_MODE0 ) /* (B2) mmc0_dat2.mmc0_dat2 */
			0xf0 ( PIN_INPUT | MUX_MODE0 ) /* (B1) mmc0_dat3.mmc0_dat3 */
			0x160 ( PIN_INPUT | MUX_MODE5 ) /* (R25) spi0_cs1.mmc0_sdcd */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	mmc1_pins_sleep: mmc1_pins_sleep {
		pinctrl-single,pins = <
			0x100 (PIN_INPUT | MUX_MODE7 ) /* (D1) mmc0_clk.mmc0_clk */
			0x104 (PIN_INPUT | MUX_MODE7 ) /* (D2) mmc0_cmd.mmc0_cmd */
			0xfc (PIN_INPUT | MUX_MODE7 ) /* (C1) mmc0_dat0.mmc0_dat0 */
			0xf8 (PIN_INPUT | MUX_MODE7 ) /* (C2) mmc0_dat1.mmc0_dat1 */
			0xf4 (PIN_INPUT | MUX_MODE7 ) /* (B2) mmc0_dat2.mmc0_dat2 */
			0xf0 (PIN_INPUT | MUX_MODE7 ) /* (B1) mmc0_dat3.mmc0_dat3 */
			0x160 (PIN_INPUT | MUX_MODE7 ) /* (R25) spi0_cs1.mmc0_sdcd */
		>;
	};

	lcdspi_pins_default: lcdspi_pins_default {
		pinctrl-single,pins = <
			0x260 ( PIN_OUTPUT | MUX_MODE0 ) /* (N20) spi2_sclk.spi2_sclk */
			0x264 ( PIN_OUTPUT | MUX_MODE0 ) /* (P22) spi2_d0.spi2_d0 */
			0x268 ( PIN_INPUT | MUX_MODE0 ) /* (P20) spi2_d1.spi2_d1 */
			0x26c ( PIN_OUTPUT | MUX_MODE0 ) /* (T23) spi2_cs0.spi2_cs0 */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	lcdspi_pins_sleep: lcdspi_pins_sleep {
		pinctrl-single,pins = <
			0x260 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (N20) spi2_sclk.spi2_sclk */
			0x264 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (P22) spi2_d0.spi2_d0 */
			0x268 (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (P20) spi2_d1.spi2_d1 */
			0x26c (PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (T23) spi2_cs0.spi2_cs0 */
		>;
	};

	lte2_i2s_pins_default: lte2_i2s_pins_default {
		pinctrl-single,pins = <
			0x250 ( PIN_INPUT | MUX_MODE0 ) /* (P25) spi4_sclk.spi4_sclk */
			0x254 ( PIN_OUTPUT | MUX_MODE0 ) /* (R24) spi4_d0.spi4_d0 */
			0x258 ( PIN_INPUT | MUX_MODE0 ) /* (P24) spi4_d1.spi4_d1 */
			0x25c ( PIN_INPUT | MUX_MODE0 ) /* (N25) spi4_cs0.spi4_cs0 */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	lte2_i2s_pins_sleep: lte2_i2s_pins_sleep {
		pinctrl-single,pins = <
			0x250 (PIN_INPUT | MUX_MODE7 ) /* (P25) spi4_sclk.spi4_sclk */
			0x254 (PIN_INPUT | MUX_MODE7) /* (R24) spi4_d0.spi4_d0 */
			0x258 (PIN_INPUT | MUX_MODE7 ) /* (P24) spi4_d1.spi4_d1 */
			0x25c (PIN_INPUT | MUX_MODE7  ) /* (N25) spi4_cs0.spi4_cs0 */
		>;
	};

	debuguart_pins_default: debuguart_pins_default {
		pinctrl-single,pins = <
			0x170 ( PIN_INPUT | MUX_MODE0 ) /* (K25) uart0_rxd.uart0_rxd */
			0x174 ( PIN_OUTPUT | MUX_MODE0 ) /* (J24) uart0_txd.uart0_txd */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	debuguart_pins_sleep: debuguart_pins_sleep {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT | MUX_MODE7 ) /* (K25) uart0_rxd.uart0_rxd */
			0x174 (PIN_INPUT | MUX_MODE7 ) /* (J24) uart0_txd.uart0_txd */
		>;
	};

	lte1uart_pins_default: lte1uart_pins_default {
		pinctrl-single,pins = <
			0x228 ( PIN_INPUT | MUX_MODE0 ) /* (H25) uart3_rxd.uart3_rxd */
			0x22c ( PIN_OUTPUT | MUX_MODE0 ) /* (H24) uart3_txd.uart3_txd */
			0x230 ( PIN_INPUT | MUX_MODE0 ) /* (H22) uart3_ctsn.uart3_ctsn */
			0x234 ( PIN_OUTPUT | MUX_MODE0 ) /* (K24) uart3_rtsn.uart3_rtsn */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	lte1uart_pins_sleep: lte1uart_pins_sleep {
		pinctrl-single,pins = <
			0x228 (PIN_INPUT | MUX_MODE7 ) /* (H25) uart3_rxd.uart3_rxd */
			0x22c (PIN_INPUT | MUX_MODE7 ) /* (H24) uart3_txd.uart3_txd */
			0x230 (PIN_INPUT | MUX_MODE7 ) /* (H22) uart3_ctsn.uart3_ctsn */
			0x234 (PIN_INPUT | MUX_MODE7 ) /* (K24) uart3_rtsn.uart3_rtsn */
		>;
	};

	lte2uart_pins_default: lte2uart_pins_default {
		pinctrl-single,pins = <
			0x180 ( PIN_INPUT | MUX_MODE0 ) /* (K21) uart1_rxd.uart1_rxd */
			0x184 ( PIN_OUTPUT | MUX_MODE0 ) /* (L21) uart1_txd.uart1_txd */
			0x178 ( PIN_INPUT | MUX_MODE0 ) /* (K22) uart1_ctsn.uart1_ctsn */
			0x17c ( PIN_OUTPUT | MUX_MODE0 ) /* (L22) uart1_rtsn.uart1_rtsn */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	lte2uart_pins_sleep: lte2uart_pins_sleep {
		pinctrl-single,pins = <
			0x180 (PIN_INPUT | MUX_MODE7 ) /* (K21) uart1_rxd.uart1_rxd */
			0x184 (PIN_INPUT | MUX_MODE7 ) /* (L21) uart1_txd.uart1_txd */
			0x178 (PIN_INPUT | MUX_MODE7 ) /* (K22) uart1_ctsn.uart1_ctsn */
			0x17c (PIN_INPUT | MUX_MODE7 ) /* (L22) uart1_rtsn.uart1_rtsn */
		>;
	};

	simuart1_pins_default: simuart1_pins_default {
		pinctrl-single,pins = <
			0x108 ( PIN_INPUT | MUX_MODE3 ) /* (D16) mii1_col.uart5_rxd */
			0x144 ( PIN_OUTPUT | MUX_MODE3 ) /* (A16) rmii1_ref_clk.uart5_txd */
			0x10c ( PIN_INPUT | MUX_MODE5 ) /* (B14) mii1_crs.uart5_ctsn */
			0x110 ( PIN_OUTPUT | MUX_MODE5 ) /* (B13) mii1_rx_er.uart5_rtsn */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	simuart1_pins_sleep: simuart1_pins_sleep {
		pinctrl-single,pins = <
			0x108 (PIN_INPUT | MUX_MODE7 ) /* (D16) mii1_col.uart5_rxd */
			0x144 (PIN_INPUT | MUX_MODE7 ) /* (A16) rmii1_ref_clk.uart5_txd */
			0x10c (PIN_INPUT | MUX_MODE7 ) /* (B14) mii1_crs.uart5_ctsn */
			0x110 (PIN_INPUT | MUX_MODE7 ) /* (B13) mii1_rx_er.uart5_rtsn */
		>;
	};

	simuart2_pins_default: simuart2_pins_default {
		pinctrl-single,pins = <
			0x70 ( PIN_INPUT | MUX_MODE6 ) /* (A2) gpmc_wait0.uart4_rxd */
			0x74 ( PIN_OUTPUT | MUX_MODE6 ) /* (B3) gpmc_wpn.uart4_txd */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	simuart2_pins_sleep: simuart2_pins_sleep {
		pinctrl-single,pins = <
			0x70 (PIN_INPUT | MUX_MODE7 ) /* (A2) gpmc_wait0.uart4_rxd */
			0x74 (PIN_INPUT | MUX_MODE7 ) /* (B3) gpmc_wpn.uart4_txd */
		>;
	};

	miniusb_pins_default: miniusb_pins_default {
		pinctrl-single,pins = <
			0x2c4 ( PIN_OUTPUT | MUX_MODE0 ) /* (F25) USB1_DRVVBUS.USB1_DRVVBUS */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	miniusb_pins_sleep: miniusb_pins_sleep {
		pinctrl-single,pins = <
			0x2c4 (PIN_OUTPUT | MUX_MODE0 ) /* (F25) USB1_DRVVBUS.USB1_DRVVBUS */
		>;
	};

	usb_hub_pins_default: usb_hub_pins_default {
		pinctrl-single,pins = <
			0x2c0 ( PIN_OUTPUT | MUX_MODE0 ) /* (G21) USB0_DRVVBUS.USB0_DRVVBUS */
		>;
	};

	/* Optional sleep pin settings. Must manually enter values in the below skeleton. */
	usb_hub_pins_sleep: usb_hub_pins_sleep {
		pinctrl-single,pins = <
			0x2c0 (PIN_OUTPUT | MUX_MODE0 ) /* (G21) USB0_DRVVBUS.USB0_DRVVBUS */
		>;
	};
	emmc_pins_default: emmc_pins_default {
		pinctrl-single,pins = <
			0x80 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (B9) gpmc_csn1.mmc1_clk */
			0x84 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (F10) gpmc_csn2.mmc1_cmd */
			0x20 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (B10) gpmc_ad8.mmc1_dat0 */
			0x24 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (A10) gpmc_ad9.mmc1_dat1 */
			0x28 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (F11) gpmc_ad10.mmc1_dat2 */
			0x2c ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (D11) gpmc_ad11.mmc1_dat3 */
			0x30 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (E11) gpmc_ad12.mmc1_dat4 */
			0x34 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (C11) gpmc_ad13.mmc1_dat5 */
			0x38 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (B11) gpmc_ad14.mmc1_dat6 */
			0x3c ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (A11) gpmc_ad15.mmc1_dat7 */
		>;
	};

	emmc_pins_sleep: emmc_pins_sleep {
		pinctrl-single,pins = <
			0x80 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (B9) gpmc_csn1.mmc1_clk */
			0x84 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (F10) gpmc_csn2.mmc1_cmd */
			0x20 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (B10) gpmc_ad8.mmc1_dat0 */
			0x24 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (A10) gpmc_ad9.mmc1_dat1 */
			0x28 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (F11) gpmc_ad10.mmc1_dat2 */
			0x2c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (D11) gpmc_ad11.mmc1_dat3 */
			0x30 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (E11) gpmc_ad12.mmc1_dat4 */
			0x34 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (C11) gpmc_ad13.mmc1_dat5 */
			0x38 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (B11) gpmc_ad14.mmc1_dat6 */
			0x3c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* (A11) gpmc_ad15.mmc1_dat7 */
		>;
	};


	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txen.rgmii1_txen */
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxdv.rgmii1_rxctl */
			0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd1.rgmii1_txd3 */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd0.rgmii1_txd2 */
			0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd1.rgmii1_txd1 */
			0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd0.rgmii1_txd0 */
			0x12c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txclk.rmii1_tclk */
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxclk.rmii1_rclk */
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd1.rgmii1_rxd3 */
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd0.rgmii1_rxd2 */
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd1.rgmii1_rxd1 */
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd0.rgmii1_rxd0 */

			/* Slave 2 */
			0x58 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a6.rgmii2_tclk */
			0x40 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a0.rgmii2_tctl */
			0x54 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a5.rgmii2_td0 */
			0x50 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a4.rgmii2_td1 */
			0x4c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a3.rgmii2_td2 */
			0x48 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a2.rgmii2_td3 */
			0x5c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a7.rgmii2_rclk */
			0x44 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a1.rgmii2_rtcl */
			0x6c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a11.rgmii2_rd0 */
			0x68 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a10.rgmii2_rd1 */
			0x64 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a9.rgmii2_rd2 */
			0x60 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a8.rgmii2_rd3 */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 reset value */
			0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x134 (PIN_INPUT | PULL_DISABLE | MUX_MODE7)
			0x138 (PIN_INPUT | PULL_DISABLE | MUX_MODE7)
			0x13c (PIN_INPUT | PULL_DISABLE | MUX_MODE7)
			0x140 (PIN_INPUT | PULL_DISABLE | MUX_MODE7)

			/* Slave 2 reset value */
			0x58 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x40 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x54 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x50 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x4c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x48 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x5c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x44 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x6c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x68 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x64 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x60 (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT | PULL_DISABLE | MUX_MODE7)
			0x14c (PIN_INPUT | PULL_DISABLE | MUX_MODE7)
		>;
	};

	leds_pins: leds_pins {
		pinctrl-single,pins = <
			0x244 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (F23) gpio5_11.gpio5[11] */
		>;
	};

	uart0_pins_default: uart0_pins_default {
		pinctrl-single,pins = <
			0x168 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE0)
			0x16C (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE0)
			0x170 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | DS0_PULL_UP_DOWN_EN | MUX_MODE0) /* uart0_rxd.uart0_rxd */
			0x174 (PIN_INPUT | PULL_DISABLE | SLEWCTRL_FAST | DS0_PULL_UP_DOWN_EN | MUX_MODE0) /* uart0_txd.uart0_txd */
		>;
	};

	uart0_pins_sleep: uart0_pins_sleep {
		pinctrl-single,pins = <
			0x168 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)
			0x16C (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)
			0x170 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | DS0_PULL_UP_DOWN_EN | MUX_MODE0) /* uart0_rxd.uart0_rxd */
			0x174 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | DS0_PULL_UP_DOWN_EN | MUX_MODE0) /* uart0_txd.uart0_txd */
		>;
	};

	
	gpio3_pins: gpio3_pins_default {
		pinctrl-single,pins = <
		0x2a4 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (N23) EMU1.gpio3[7] */
		0x2a8 ( PIN_OUTPUT | MUX_MODE7 ) /* (T24) EMU1.gpio3[8] */
		>;
	};

	unused_pins_default: pinmux_unused_pins_default {
	pinctrl-single,pins = <
		0x23c ( PIN_INPUT_PULLDOWN | MUX_MODE7)  // GPIO5_9
		0x270 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* (D24) xdma_event_intr0.gpio0[19] */
		>;
	};

	unused_pins_sleep: pinmux_unused_pins_sleep {
		pinctrl-single,pins = <
			0x23c ( PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x270 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D24) xdma_event_intr0.gpio0[19] */
			>;
        };
};

&i2c0 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c0_pins_default>;
	pinctrl-1 = <&i2c0_pins_sleep>;
	clock-frequency = <100000>;

	at24@50 {
		compatible = "at24,24c256";
		pagesize = <64>;
		reg = <0x50>;
		};

	tps65218: tps65218@24 {
		reg = <0x24>;
		compatible = "ti,tps65218";
		interrupts = <GIC_SPI 7 IRQ_TYPE_LEVEL_HIGH>;
		interrupt-controller;
		#interrupt-cells = <2>;

		dcdc1: regulator-dcdc1 {
			compatible = "ti,tps65218-dcdc1";
			/* VDD_CORE limits min of OPP50 and max of OPP100 */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <912000>;
			regulator-max-microvolt = <1144000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc2: regulator-dcdc2 {
			compatible = "ti,tps65218-dcdc2";
			/* VDD_MPU limits min of OPP50 and max of OPP_NITRO */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <912000>;
			regulator-max-microvolt = <1378000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc3: regulator-dcdc3 {
			compatible = "ti,tps65218-dcdc3";
			regulator-name = "vdds_ddr";
			regulator-min-microvolt = <1500000>;
			regulator-max-microvolt = <1500000>;
			regulator-boot-on;
			regulator-always-on;
			regulator-state-mem {
				regulator-on-in-suspend;
			};
			regulator-state-disk {
				regulator-off-in-suspend;
			};
		};

		dcdc4: regulator-dcdc4 {
			compatible = "ti,tps65218-dcdc4";
			regulator-name = "v3_3d";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc5: regulator-dcdc5 {
			compatible = "ti,tps65218-dcdc5";
			regulator-name = "v1_0bat";
			regulator-min-microvolt = <1000000>;
			regulator-max-microvolt = <1000000>;
			regulator-boot-on;
			regulator-always-on;
			regulator-state-mem {
				regulator-on-in-suspend;
			};
		};

		dcdc6: regulator-dcdc6 {
			compatible = "ti,tps65218-dcdc6";
			regulator-name = "v1_8bat";
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <1800000>;
			regulator-boot-on;
			regulator-always-on;
			regulator-state-mem {
				regulator-on-in-suspend;
			};
		};

		ldo1: regulator-ldo1 {
			compatible = "ti,tps65218-ldo1";
			regulator-name = "v1_8d";
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <1800000>;
			regulator-boot-on;
			regulator-always-on;
		};

		power-button {
			compatible = "ti,tps65218-pwrbutton";
			status = "okay";
			interrupts = <3 IRQ_TYPE_EDGE_BOTH>;
		};
	};
};

&i2c1 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins_default>;
	pinctrl-1 = <&i2c1_pins_sleep>;

	rtc1: ds1307@68 {
		compatible = "dallas,ds1307";
		reg = <0x68>;
	};

	usb-hub@2d {
		compatible = "smsc,usb4604";
		reg = <0x2d>;
		initial-mode = <1>;
	};
};


/*
&clkout2_ck {
	status = "okay";
};

&clkout2_src_mux_ck {
	status="okay";
	assigned-clocks = <&clkout2_src_mux_ck>;
	assigned-clock-parents = <&dpll_per_m2_ck>;
};

&clkout2_src_post_div_ck {
	status = "okay";
	assigned-clocks = <&clkout2_src_post_div_ck>;
	assigned-clock-rates = <24000000>;
};
*/

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&gpio2 {
	status = "okay";
};

&gpio3 {
	pinctrl-names = "default";
	pinctrl-0 = <&gpio3_pins>;
	status = "okay";

	p8 {
		gpio-hog;
		gpios = <8 GPIO_ACTIVE_HIGH>;
		output-high;
		line-name = "EMMC_RST";
	};
};

&gpio4{
	status = "okay";
};

&gpio5 {
	status = "okay";
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&dcdc4>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc1_pins_default>;
	pinctrl-1 = <&mmc1_pins_sleep>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_HIGH>;
};
/* eMMC sits on mmc2 */
&mmc2 {
	/*
	 * When enabling eMMC, disable GPMC/NAND and set
	 * SelEMMCorNAND to output-high
	 */
	status = "okay";
	vmmc-supply = <&dcdc4>;
	bus-width = <8>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&emmc_pins_default>;
	pinctrl-1 = <&emmc_pins_sleep>;
	ti,non-removable;
};

&usb2_phy1 {
	status = "okay";
};


&usb1 {
	dr_mode = "host";
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&usb_hub_pins_default>;
};

&usb2_phy2 {
	status = "okay";
};

&usb2 {
	dr_mode = "otg";
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&miniusb_pins_default>;
};

&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	dual_emac = <1>;
	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
	status = "okay";
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <4>;
	phy-mode = "rgmii";
	dual_emac_res_vlan = <1>;
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "rgmii";
	dual_emac_res_vlan = <2>;
};

&elm {
	status = "okay";
};

&uart0 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&debuguart_pins_default>;
	pinctrl-1 = <&debuguart_pins_sleep>;
};

&uart1 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&lte2uart_pins_default>;
	pinctrl-1 = <&lte2uart_pins_sleep>;
};

&uart3 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&lte1uart_pins_default>;
	pinctrl-1 = <&lte1uart_pins_sleep>;
};

&uart4 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&simuart2_pins_default>;
	pinctrl-1 = <&simuart2_pins_sleep>;
};

&uart5 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&simuart1_pins_default>;
	pinctrl-1 = <&simuart1_pins_sleep>;
};

&spi2 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&lcdspi_pins_default>;
	ti,pindir-d0-in-d1-out =<1>; // optional
};

&spi4 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&lte2_i2s_pins_default>;
	ti,pindir-d0-in-d1-out =<1>; // optional
};

&mcasp0 {
	#sound-dai-cells = <0>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mcasp0_pins_default>;
	pinctrl-1 = <&mcasp0_pins_sleep>;

	status = "okay";

	op-mode = <0>; /* MCASP_IIS_MODE */
	tdm-slots = <2>;
	/* 4 serializers */
	serial-dir = <  /* 0: INACTIVE, 1: TX, 2: RX */
		1 2 0 0
	>;
	tx-num-evt = <32>;
	rx-num-evt = <32>;
};


&wkup_m3_ipc {
	ti,set-io-isolation;
	ti,scale-data-fw = "am43x-evm-scale-data.bin";
};

&cpu {
	cpu0-supply = <&dcdc2>;
};

&rtc {
	status = "disabled";
	ext-clk-src;
};

/*
&sgx {
	status = "disabled";
};
*/
